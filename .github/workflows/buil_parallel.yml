---
name: Build and Push Releases

on:
  push:
    # branches:
    #   - main
    tags:
      - "*"
  workflow_dispatch:

jobs:
  compile_sketch:
    name: Build ${{ matrix.board.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        board:
          - {
              vendor: "CYD",
              name: "CYD-2432S028",
              env: "CYD-2432S028",
              family: "ESP32",
              partitions: { bootloader_addr: "0x1000" },
            }
          - {
              vendor: "CYD",
              name: "CYD-2432S028 (2USB or inverted Colors)",
              env: "CYD-2USB",
              family: "ESP32",
              partitions: { bootloader_addr: "0x1000" },
            }
          - {
              vendor: "CYD",
              name: "CYD-2432W328C",
              env: "CYD-2432W328C",
              family: "ESP32",
              partitions: { bootloader_addr: "0x1000" },
            }
          - {
              vendor: "CYD",
              name: "CYD-2432W328C (inv colors) and CYD-2432S024C",
              env: "CYD-2432W328C_2",
              family: "ESP32",
              partitions: { bootloader_addr: "0x1000" },
            }
          - {
              vendor: "CYD",
              name: "CYD-2432W328R or 2432S024R",
              env: "CYD-2432W328R-or-S024R",
              family: "ESP32",
              partitions: { bootloader_addr: "0x1000" },
            }
    steps:
      - uses: actions/checkout@v4

      - id: build
        name: setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install requests esptool

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio
          key: Bruce-platformio-${{ hashFiles('**/platformio.ini') }}
          restore-keys: Bruce-platformio-

      - name: Restore PIO
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ github.workspace }}/.pio
          key: Bruce-pio-${{ matrix.board.env }}-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            Bruce-pio-${{ matrix.board.env }}-

      - name: Install PlatformIO Core
        run: |
          pip install platformio

          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            version=${{ github.ref_name }}
          else
            version="${GITHUB_SHA::7}"
          fi

          sed -i "s/-DBRUCE_VERSION=/-DBRUCE_VERSION='\"$version\"' ; /g" ./platformio.ini
          sed -i "s/-DGIT_COMMIT_HASH='\"Homebrew\"'/\!echo '-DGIT_COMMIT_HASH=\\\\\\\\\"'\$\(git describe --always --dirty)'\\\\\\\\\"'/g" ./platformio.ini

          cat ./platformio.ini

      - name: Run Compile
        run: |
          platformio run -e ${{ matrix.board.env }}

      - name: Cache PIO
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ github.workspace }}/.pio
          key: Bruce-pio-${{ matrix.board.env }}-${{ github.run_id }}-${{ github.run_attempt }}

      - name: Merge files
        run: |
          esptool.py --chip esp32s3 merge_bin -o Bruce-${{ matrix.board.env }}.bin \
              ${{ matrix.board.partitions.bootloader_addr }} .pio/build/${{ matrix.board.env }}/bootloader.bin \
              0x8000 .pio/build/${{ matrix.board.env }}/partitions.bin \
              0x10000 .pio/build/${{ matrix.board.env }}/firmware.bin

          # This one below isnÂ´t working for ESP32 boards like StickCPlus2
          # pio run -e ${{ matrix.board.env }} -t build-firmware

          js_content="{\"name\":\"${{ matrix.board.name }}\",\"new_install_prompt_erase\": true,\"builds\":[{\"chipFamily\":\"${{ matrix.board.family }}\",\"improv\":false,\"parts\":[{\"path\":\"Bruce-${{ matrix.board.env }}.bin\",\"offset\":0}]}]}"

          echo "$js_content" > "./Bruce-${{ matrix.board.env }}.json"

      - name: Upload ${{ matrix.board.name }}
        uses: actions/upload-artifact@v4
        with:
          name: Bruce-${{ matrix.board.env }}
          path: Bruce-*.*
          retention-days: 5
          if-no-files-found: error

  post_compile_steps:
    name: Post-compile steps
    runs-on: ubuntu-latest
    needs: compile_sketch
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') || github.ref_type == 'tag'
    steps:
      - uses: actions/checkout@v4
        with:
          # Configura para garantir que todas as branches sejam buscadas
          fetch-depth: 0
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ~/BruceArtifacts
      - name: Clone Bruce repository and switch to WebPage branch
        run: |
          git fetch origin
          git checkout WebPage || git checkout -b WebPage origin/WebPage
      - name: Move artifacts to the correct folders
        run: |
          set -x
          pwd
          ls -all
          tree
          if [ "${{ github.ref_type }}" != "tag" ]; then
            rm -f ./BetaRelease/*
            mv -f ~/BruceArtifacts/*/*.bin ./BetaRelease
          elif [ "${{ github.ref_type }}" == "tag" ]; then
            rm -f ./LastRelease/*
            mv -f ~/BruceArtifacts/*/*.bin ./LastRelease
          fi
          cp -f ~/BruceArtifacts/*/*.json ./LastRelease
          cp -f ~/BruceArtifacts/*/*.json ./BetaRelease

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update artifacts from build"
          git push origin WebPage

  create_release:
    runs-on: ubuntu-latest
    environment: github_release
    needs: [compile_sketch]
    if: github.ref_type == 'tag'
    steps:
      - id: bruce_version
        name: Get Version
        run: |
          set -x

          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            version=${{ github.ref_name }}
          else
            version="${GITHUB_SHA::7}"
          fi

          echo "version=${version}" > $GITHUB_OUTPUT
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: List all files
        if: always()
        run: |
          set -x
          pwd
          ls -all
          tree

      - name: Create Release ${{ steps.bruce_version.outputs.version }}
        uses: softprops/action-gh-release@v1
        with:
          name: Bruce Release ${{ steps.bruce_version.outputs.version }}
          tag_name: ${{ steps.bruce_version.outputs.version }}
          generate_release_notes: true
          files: |
            Bruce-*.bin
